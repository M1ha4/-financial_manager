import os
from telebot import types
from core import user_manager
from core.plot_utils import plot_expenses

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs("data", exist_ok=True)

# –í –ø–∞–º—è—Ç–∏
user_data = {}  # {user_id: {name, age, balance, income, expenses: {–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Å—É–º–º–∞}, goals: []}}

CATEGORIES = ["–ï–¥–∞", "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–î—Ä—É–≥–æ–µ"]

GOALS = {
    "goal_save": "–ù–∞–∫–æ–ø–∏—Ç—å",
    "goal_optimize": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã",
    "goal_advice": "–ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞",
    "goal_other": "–î—Ä—É–≥–æ–µ"
}


def register_handlers(bot, all_users, data_file):

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        user_id = message.from_user.id
        user_data[user_id] = {
            "name": "",
            "age": "",
            "balance": "",
            "income": "",
            "expenses": {},
            "goals": []
        }

        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(message, get_name)

    def get_name(message):
        user_id = message.from_user.id
        user_data[user_id]["name"] = message.text.strip()

        bot.send_message(message.chat.id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}! –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        bot.register_next_step_handler(message, get_age)

    def get_age(message):
        user_id = message.from_user.id
        if not message.text.isdigit():
            msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.')
            bot.register_next_step_handler(msg, get_age)
            return

        user_data[user_id]["age"] = message.text
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –≤ –º–µ—Å—è—Ü (–≤ —Ä—É–±–ª—è—Ö)?")
        bot.register_next_step_handler(message, get_income)

    def get_income(message):
        user_id = message.from_user.id
        if not message.text.isdigit():
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ —á–∏—Å–ª–æ–º.')
            bot.register_next_step_handler(msg, get_income)
            return

        user_data[user_id]["income"] = int(message.text)
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–µ–π—á–∞—Å –¥–µ–Ω–µ–≥ (–±–∞–ª–∞–Ω—Å, –≤ —Ä—É–±–ª—è—Ö).")
        bot.register_next_step_handler(message, get_balance)

    def get_balance(message):
        user_id = message.from_user.id
        if not message.text.isdigit():
            msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.')
            bot.register_next_step_handler(msg, get_balance)
            return

        balance = int(message.text)
        if balance < 0:
            msg = bot.reply_to(message, '–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è.')
            bot.register_next_step_handler(msg, get_balance)
            return

        user_data[user_id]["balance"] = balance

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
        all_users.append([
            user_data[user_id]["name"],
            user_data[user_id]["age"],
            balance,
            user_data[user_id]["income"]
        ])
        user_manager.save_user_to_file(
            data_file,
            user_data[user_id]["name"],
            user_data[user_id]["age"],
            balance,
            user_data[user_id]["income"]
        )

        bot.send_message(
            message.chat.id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Å–æ–±–µ—Ä—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö.\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –ï–¥–∞, –ö–≤–∞—Ä—Ç–∏—Ä–∞, –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –î—Ä—É–≥–æ–µ.\n"
            f"üí∞ –°–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {CATEGORIES[0]} –≤ –º–µ—Å—è—Ü?"
        )
        bot.register_next_step_handler(message, get_expense, 0)

    def get_expense(message, index):
        user_id = message.from_user.id
        if not message.text.isdigit():
            msg = bot.reply_to(message, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏. –°–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {CATEGORIES[index]}?")
            bot.register_next_step_handler(msg, get_expense, index)
            return

        amount = int(message.text)
        user_data[user_id]["expenses"][CATEGORIES[index]] = amount

        if index + 1 < len(CATEGORIES):
            bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {CATEGORIES[index + 1]} –≤ –º–µ—Å—è—Ü?")
            bot.register_next_step_handler(message, get_expense, index + 1)
        else:
            total_expenses = sum(user_data[user_id]["expenses"].values())
            balance = user_data[user_id]["balance"]
            income = user_data[user_id]["income"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ –æ–±—â–µ–π —Å—É–º–º–æ–π —Ä–∞—Å—Ö–æ–¥–æ–≤
            user_manager.save_user_to_file(
                data_file,
                user_data[user_id]["name"],
                user_data[user_id]["age"],
                balance,
                income,
                user_data[user_id]["expenses"],
                total_expenses
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
            img_path = plot_expenses(user_data, user_id)
            bot.send_photo(
                message.chat.id,
                photo=open(img_path, 'rb'),
                caption=(
                    "‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
                    f"–ò–º—è: {user_data[user_id]['name']}\n"
                    f"–í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['age']}\n"
                    f"–î–æ—Ö–æ–¥: {user_data[user_id]['income']} —Ä—É–±.\n"
                    f"–ë–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} —Ä—É–±.\n"
                    f"–°—É–º–º–∞—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {sum(user_data[user_id]['expenses'].values())} —Ä—É–±."
                )
            )

            # –ü–æ—Å–ª–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–∏
            ask_goals(message)

    def ask_goals(message):
        user_id = message.from_user.id
        user_data[user_id]["goals"] = []

        markup = types.InlineKeyboardMarkup(row_width=1)
        for key, val in GOALS.items():
            markup.add(types.InlineKeyboardButton(val, callback_data=key))
        markup.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="goal_done"))

        bot.send_message(
            message.chat.id,
            "üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("goal_"))
    def callback_goals(call):
        user_id = call.from_user.id
        goals = user_data[user_id].get("goals", [])

        if call.data == "goal_done":
            user_manager.save_user_to_file(
                data_file,
                user_data[user_id]["name"],
                user_data[user_id]["age"],
                user_data[user_id]["balance"],
                user_data[user_id]["income"],
                user_data[user_id]["expenses"],
                sum(user_data[user_id]["expenses"].values()),
                goals
            )
            bot.edit_message_text(
                f"üéØ –í–∞—à–∏ —Ü–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(goals) if goals else '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
            return

        goal = GOALS[call.data]
        if goal in goals:
            goals.remove(goal)
        else:
            goals.append(goal)

        user_data[user_id]["goals"] = goals

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup(row_width=1)
        for key, val in GOALS.items():
            text = f"‚úÖ {val}" if val in goals else val
            markup.add(types.InlineKeyboardButton(text, callback_data=key))
        markup.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="goal_done"))

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
