from telebot import types
from core import user_manager

# –í –ø–∞–º—è—Ç–∏
user_data = {}  # {user_id: {name, age, balance, expenses: {–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Å—É–º–º–∞}}}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
CATEGORIES = ["–ï–¥–∞", "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–î—Ä—É–≥–æ–µ"]


def register_handlers(bot, all_users, data_file):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        user_id = message.from_user.id
        user_data[user_id] = {
            "name": "",
            "age": "",
            "balance": "",
            "expenses": {}
        }

        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(message, get_name)

    def get_name(message):
        user_id = message.from_user.id
        user_data[user_id]["name"] = message.text.strip()

        bot.send_message(message.chat.id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}! –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        bot.register_next_step_handler(message, get_age)

    def get_age(message):
        user_id = message.from_user.id

        if not message.text.isdigit():
            msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
            bot.register_next_step_handler(msg, get_age)
            return

        user_data[user_id]["age"] = message.text

        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –¥–µ–Ω–µ–≥ (–≤ —Ä—É–±–ª—è—Ö).")
        bot.register_next_step_handler(message, get_balance)

    def get_balance(message):
        user_id = message.from_user.id

        if not message.text.isdigit():
            msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏. –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –¥–µ–Ω–µ–≥?')
            bot.register_next_step_handler(msg, get_balance)
            return

        balance = int(message.text)

        if balance <= 0:
            msg = bot.reply_to(message, '–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.')
            bot.register_next_step_handler(msg, get_balance)
            return

        user_data[user_id]["balance"] = str(balance)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –≤ –ø–∞–º—è—Ç–∏ (–ø–æ–∫–∞ –±–µ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤)
        all_users.append([user_data[user_id]["name"], user_data[user_id]["age"], str(balance)])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
        user_manager.save_user_to_file(
            data_file,
            user_data[user_id]["name"],
            user_data[user_id]["age"],
            str(balance)
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—Ö–æ–¥–∞–º
        bot.send_message(
            message.chat.id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
            f"–ò–º—è: {user_data[user_id]['name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['age']}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n\n"
            "–¢–µ–ø–µ—Ä—å —Å–æ–±–µ—Ä—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö.\n"
            "–£ –Ω–∞—Å 6 –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –ï–¥–∞, –ö–≤–∞—Ä—Ç–∏—Ä–∞, –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –î—Ä—É–≥–æ–µ."
        )
        bot.send_message(message.chat.id, f"üí∞ –°–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {CATEGORIES[0]} –≤ –º–µ—Å—è—Ü?")
        bot.register_next_step_handler(message, get_expense, 0)

    def get_expense(message, index):
        user_id = message.from_user.id

        if not message.text.isdigit():
            msg = bot.reply_to(
                message,
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏. –°–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {CATEGORIES[index]}?"
            )
            bot.register_next_step_handler(msg, get_expense, index)
            return

        amount = int(message.text)
        user_data[user_id]["expenses"][CATEGORIES[index]] = amount

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
        if index + 1 < len(CATEGORIES):
            bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {CATEGORIES[index + 1]} –≤ –º–µ—Å—è—Ü?")
            bot.register_next_step_handler(message, get_expense, index + 1)
        else:
            # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥
            summary = "üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:\n"
            total_expenses = 0
            for cat, val in user_data[user_id]["expenses"].items():
                summary += f"- {cat}: {val} —Ä—É–±.\n"
                total_expenses += val

            balance = int(user_data[user_id]["balance"])

            summary += f"\nüí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expenses} —Ä—É–±."

            bot.send_message(
                message.chat.id,
                "‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
                f"–ò–º—è: {user_data[user_id]['name']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['age']}\n"
                f"–ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n\n"
                f"{summary}"
            )
