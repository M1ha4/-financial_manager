import os
from telebot import types
from core import user_manager
from core.plot_utils import plot_expenses

os.makedirs("data", exist_ok=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_data = {}

CATEGORIES = ["–ï–¥–∞", "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–î—Ä—É–≥–æ–µ"]
GOALS = {
    "goal_save": "–ù–∞–∫–æ–ø–∏—Ç—å",
    "goal_optimize": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã",
    "goal_advice": "–ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã",
    "goal_other": "–î—Ä—É–≥–æ–µ"
}


def register_handlers(bot, all_users, data_file):

    # === /start ===
    @bot.message_handler(commands=['start'])
    def start(message):
        user_id = message.from_user.id
        user_data[user_id] = {
            "name": "",
            "age": "",
            "balance": 0,
            "income": 0,
            "expenses": {},
            "goals": [],
            "target_sum": None,
            "target_months": None,
            "state": "get_name",
            "expense_index": 0
        }
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
    @bot.message_handler(func=lambda m: True)
    def handle_text(message):
        user_id = message.from_user.id
        if user_id not in user_data:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
            return

        state = user_data[user_id].get("state")

        if state == "get_name":
            get_name(message)
        elif state == "get_age":
            get_age(message)
        elif state == "get_income":
            get_income(message)
        elif state == "get_balance":
            get_balance(message)
        elif state == "get_expense":
            get_expense(message, user_data[user_id]["expense_index"])
        elif state == "await_target_sum":
            get_target_sum(message)
        elif state == "await_target_months":
            get_target_months(message)
        elif state in ["add_income", "add_expense"]:
            handle_income_expense(message)
        else:
            # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            if message.text in ["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∏ –î–æ–ª–≥–∏"]:
                handle_main_menu(message)
            else:
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é üëá")

    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===
    def get_name(message):
        user_id = message.from_user.id
        user_data[user_id]["name"] = message.text.strip()
        user_data[user_id]["state"] = "get_age"
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

    def get_age(message):
        user_id = message.from_user.id
        if not message.text.isdigit():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")
            return
        user_data[user_id]["age"] = int(message.text)
        user_data[user_id]["state"] = "get_income"
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü (—Ä—É–±)?")

    def get_income(message):
        user_id = message.from_user.id
        if not message.text.isdigit():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ —á–∏—Å–ª–æ–º")
            return
        user_data[user_id]["income"] = int(message.text)
        user_data[user_id]["state"] = "get_balance"
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –¥–µ–Ω–µ–≥ (–±–∞–ª–∞–Ω—Å)?")

    def get_balance(message):
        user_id = message.from_user.id
        if not message.text.isdigit():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º")
            return
        user_data[user_id]["balance"] = int(message.text)
        user_data[user_id]["state"] = "get_expense"
        bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {CATEGORIES[0]}?")

    def get_expense(message, index):
        user_id = message.from_user.id
        if not message.text.isdigit():
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º –¥–ª—è {CATEGORIES[index]}")
            return

        amount = int(message.text)
        user_data[user_id]["expenses"][CATEGORIES[index]] = amount

        if index + 1 < len(CATEGORIES):
            user_data[user_id]["expense_index"] = index + 1
            bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ {CATEGORIES[index + 1]}?")
        else:
            # –°—É–º–º–∞ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
            total_expenses = sum(user_data[user_id]["expenses"].values())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            user_manager.save_user_to_file(
                data_file,
                user_data[user_id]["name"],
                user_data[user_id]["age"],
                user_data[user_id]["balance"],
                user_data[user_id]["income"],
                user_data[user_id]["expenses"],
                total_expenses
            )

            # –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤
            img_path = plot_expenses(user_data, user_id)
            bot.send_photo(
                message.chat.id,
                photo=open(img_path, 'rb'),
                caption=(f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
                         f"–ò–º—è: {user_data[user_id]['name']}\n"
                         f"–í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['age']}\n"
                         f"–î–æ—Ö–æ–¥: {user_data[user_id]['income']} —Ä—É–±.\n"
                         f"–ë–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} —Ä—É–±.\n"
                         f"–†–∞—Å—Ö–æ–¥—ã –≤—Å–µ–≥–æ: {total_expenses} —Ä—É–±.")
            )

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–π
            ask_goals(message)

    # === –¶–µ–ª–∏ ===
    def ask_goals(message):
        user_id = message.from_user.id
        markup = types.InlineKeyboardMarkup(row_width=1)
        for key, val in GOALS.items():
            markup.add(types.InlineKeyboardButton(val, callback_data=key))
        markup.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="goal_done"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–∏:", reply_markup=markup)
        user_data[user_id]["state"] = "choose_goals"

    @bot.callback_query_handler(func=lambda call: call.data.startswith("goal_"))
    def callback_goals(call):
        user_id = call.from_user.id
        goals = user_data[user_id].get("goals", [])

        if call.data == "goal_done":
            if "–ù–∞–∫–æ–ø–∏—Ç—å" in goals and not user_data[user_id].get("target_sum"):
                user_data[user_id]["state"] = "await_target_sum"
                bot.send_message(call.message.chat.id, "üí∞ –ö–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å?")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            user_data[user_id]["state"] = None
            show_main_menu(bot, call.message.chat.id, user_id)
            return

        goal = GOALS[call.data]
        if goal in goals:
            goals.remove(goal)
        else:
            goals.append(goal)
        user_data[user_id]["goals"] = goals

        markup = types.InlineKeyboardMarkup(row_width=1)
        for key, val in GOALS.items():
            text = f"‚úÖ {val}" if val in goals else val
            markup.add(types.InlineKeyboardButton(text, callback_data=key))
        markup.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="goal_done"))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

    def get_target_sum(message):
        user_id = message.from_user.id
        if not message.text.isdigit():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return
        user_data[user_id]["target_sum"] = int(message.text)
        user_data[user_id]["state"] = "await_target_months"
        bot.send_message(message.chat.id, "–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å?")

    def get_target_months(message):
        user_id = message.from_user.id
        if not message.text.isdigit() or int(message.text) <= 0:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        user_data[user_id]["target_months"] = int(message.text)
        user_data[user_id]["state"] = None
        show_main_menu(bot, message.chat.id, user_id)

    # === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
    def handle_main_menu(message):
        user_id = message.from_user.id
        text = message.text
        if text == "‚ûï –î–æ—Ö–æ–¥":
            user_data[user_id]["state"] = "add_income"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
        elif text == "‚ûñ –†–∞—Å—Ö–æ–¥":
            user_data[user_id]["state"] = "add_expense"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            bot.send_message(message.chat.id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        elif text == "üí∏ –î–æ–ª–≥–∏":
            bot.send_message(message.chat.id, "üí∏ –î–æ–ª–≥–∏ (–ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    def handle_income_expense(message):
        user_id = message.from_user.id
        state = user_data[user_id]["state"]
        if not message.text.isdigit():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º")
            return
        amount = int(message.text)
        if state == "add_income":
            user_data[user_id]["balance"] += amount
            bot.send_message(message.chat.id, f"‚úÖ –î–æ—Ö–æ–¥ +{amount} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            user_data[user_id]["balance"] -= amount
            bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Ö–æ–¥ -{amount} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω")
        user_data[user_id]["state"] = None
        show_main_menu(bot, message.chat.id, user_id)


def show_main_menu(bot, chat_id, user_id):
    balance = user_data[user_id].get("balance", 0)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥")
    markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∏ –î–æ–ª–≥–∏")
    bot.send_message(chat_id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.", reply_markup=markup)
